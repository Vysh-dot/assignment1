11)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct {
    int id;
    char name[50];
    float price;
} ProductPacket;
int main() {
    int initialSize = 10;
    ProductPacket *inventory = malloc(initialSize * sizeof(ProductPacket));
    if (inventory == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        return 1;
    }
    for (int i = 0; i < initialSize; i++) {
        inventory[i].id = i;
        snprintf(inventory[i].name, sizeof(inventory[i].name), "Product %d", i);
        inventory[i].price = i * 10.0;
    }
    for (int i = 0; i < initialSize; i++) {
        printf("ID: %d, Name: %s, Price: %.2f\n", inventory[i].id, inventory[i].name, inventory[i].price);
    }
    int newSize = 15;
    ProductPacket *newInventory = realloc(inventory, newSize * sizeof(ProductPacket));
    if (newInventory == NULL) {
        fprintf(stderr, "Memory reallocation failed\n");
        free(inventory);
        return 1;
    }
    inventory = newInventory;
    for (int i = initialSize; i < newSize; i++) {
        inventory[i].id = i;
        snprintf(inventory[i].name, sizeof(inventory[i].name), "New Product %d", i);
        inventory[i].price = i * 10.0;
    }
    for (int i = 0; i < newSize; i++) {
        printf("ID: %d, Name: %s, Price: %.2f\n", inventory[i].id, inventory[i].name, inventory[i].price);
    }
   free(inventory);
    return 0;
    }

12)
#include <stdio.h>

int main() {
    int weights[5] = {10, 15, 7, 22, 30}; 
    int totalWeight = 0;
    for (int i = 0; i < 5; i++) {
        totalWeight += weights[i];
    }
    printf("Total weight collected: %d\n", totalWeight);

    return 0;
}


13)
#include <stdio.h>
typedef struct {
    float length;
    float breadth;
} Rectangle;
typedef struct {
    float side;
    float area; 
} Square;
void calculateSquareArea(Square *sq) {
    sq->area = sq->side * sq->side;
}
float calculateRectangleArea(Rectangle *rect) {
    return rect->length * rect->breadth;
}

int main() {
    Rectangle rect;
    rect.length = 10.0;
    rect.breadth = 5.0;
    Square sq;
    sq.side = 4.0;
    calculateSquareArea(&sq);
    float rectArea = calculateRectangleArea(&rect);
    printf("Area of the Square: %.2f\n", sq.area);
    printf("Area of the Rectangle: %.2f\n", rectArea);
    return 0;
}

14)

#include <stdio.h>
#include <string.h>

#define MAX_STUDENTS 50 
void addStudent(char studentList[][100], int *count, const char *name) {
    if (*count < MAX_STUDENTS) {
        strncpy(studentList[*count], name, 99);
        studentList[*count][99] = '\0'; 
        (*count)++;
    } else {
        printf("The student list is full!\n");
    }
}
void printStudentList(const char studentList[][100], int count) {
    printf("List of students who have submitted their assignments:\n");
    for (int i = 0; i < count; i++) {
        printf("%d. %s\n", i + 1, studentList[i]);
    }
}
int main() {
    char studentList[MAX_STUDENTS][100]; 
    int studentCount = 0; 
    addStudent(studentList, &studentCount, "Alice Smith");
    addStudent(studentList, &studentCount, "Bob Johnson");
    addStudent(studentList, &studentCount, "Charlie Brown");
    printStudentList(studentList, studentCount);
    return 0;
}

15)
#include <stdio.h>
int binarySearch(int arr[], int size, int target) {
    int left = 0;
    int right = size - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] == target) {
            return mid; 
        }
        if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return -1; 
}
int main() {
    int bookIds[] = {101, 103, 105, 107, 109}; 
    int size = sizeof(bookIds) / sizeof(bookIds[0]);
    int searchId;
    printf("Enter the book ID to search: ");
    scanf("%d", &searchId);
    int result = binarySearch(bookIds, size, searchId);
    if (result != -1) {
        printf("Book ID %d is available at index %d.\n", searchId, result);
    } else {
        printf("Book ID %d is not available in the library.\n", searchId);
    }
    return 0;
}

16)
#include <stdio.h>

#define ROWS 2
#define COLS 2
void addMatrices(int matrix1[ROWS][COLS], int matrix2[ROWS][COLS], int result[ROWS][COLS]) {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            result[i][j] = matrix1[i][j] + matrix2[i][j];
        }
    }
}
void printMatrix(int matrix[ROWS][COLS]) {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int matrix1[ROWS][COLS] = {
        {3,4},
        {2,4}
    };
    
    int matrix2[ROWS][COLS] = {
        {1,2},
        {3,4}
    };
    int result[ROWS][COLS]; 
    addMatrices(matrix1, matrix2, result);
    printf("Matrix 1:\n");
    printMatrix(matrix1);
    printf("Matrix 2:\n");
    printMatrix(matrix2);
    printf("Result of Matrix Addition:\n");
    printMatrix(result);
    return 0;
}

17)

#include <stdio.h>
#include <string.h>

#define NUM_STUDENTS 5
#define NAME_LENGTH 50
typedef struct {
    int registerNumber;
    char name[NAME_LENGTH];
    int age;
    float cgpa;
} Student;
void inputStudentRecords(Student students[], int numStudents) {
    for (int i = 0; i < numStudents; i++) {
        printf("Enter details for student %d:\n", i + 1);
        printf("Register Number: ");
        scanf("%d", &students[i].registerNumber);
        getchar(); 
        printf("Name: ");
        fgets(students[i].name, NAME_LENGTH, stdin);
        size_t len = strlen(students[i].name);
        if (len > 0 && students[i].name[len - 1] == '\n') {
            students[i].name[len - 1] = '\0';
        }
        printf("Age: ");
        scanf("%d", &students[i].age);

        printf("CGPA: ");
        scanf("%f", &students[i].cgpa);

        printf("\n");
    }
}
Student findStudentWithGreatestCGPA(Student students[], int numStudents) {
    Student topStudent = students[0]; // Start with the first student as the top student

    for (int i = 1; i < numStudents; i++) {
        if (students[i].cgpa > topStudent.cgpa) {
            topStudent = students[i];
        }
    }
    return topStudent;
}
int main() {
    Student students[NUM_STUDENTS]; 
    inputStudentRecords(students, NUM_STUDENTS);
    Student topStudent = findStudentWithGreatestCGPA(students, NUM_STUDENTS);
    printf("Student with the greatest CGPA:\n");
    printf("Register Number: %d\n", topStudent.registerNumber);
    printf("Name: %s\n", topStudent.name);
    printf("Age: %d\n", topStudent.age);
    printf("CGPA: %.2f\n", topStudent.cgpa);
    return 0;
}

18)
#include <stdio.h>
#include <stdbool.h>
bool isPrime(int num) {
    if (num <= 1) return false;
    if (num <= 3) return true;
    if (num % 2 == 0 || num % 3 == 0) return false;
    for (int i = 5; i * i <= num; i += 6) {
        if (num % i == 0 || num % (i + 2) == 0) return false;
    }
    return true;
}
int countTwoDigitPrimes(int n) {
    char numStr[20]; 
    snprintf(numStr, sizeof(numStr), "%d", n); 
    int length = strlen(numStr);
    int primeCount = 0;
    for (int i = 0; i < length - 1; i++) {
        int twoDigitNum = (numStr[i] - '0') * 10 + (numStr[i + 1] - '0');
        if (twoDigitNum >= 10 && isPrime(twoDigitNum)) {
            primeCount++;
        }
    }
    return primeCount;
}
int main() {
    int n;
    printf("Enter a number: ");
    scanf("%d", &n);
    int primeCount = countTwoDigitPrimes(n);
    printf("Number of two-digit primes: %d\n", primeCount);
    return 0;
}


